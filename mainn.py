import requests
import time
import asyncio
import datetime
import threading
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from datetime import date
from bs4 import BeautifulSoup
import re

token = "5787139770:AAG6WQN12KsIKLYCah2iDXTJjobSeiw7aiI"


def timew():
    current_date_time = datetime.datetime.now()
    current_time = str(current_date_time.time())
    s_time = current_time.split(":")
    a = int(s_time[0])
    b = int(s_time[1])
    aft = 24*60-(60*a + b)
    return aft


def sec():
    current_date_time = datetime.datetime.now()
    current_time = str(current_date_time.time())
    s_time = current_time.split(":")
    c = s_time[2].split('.')
    c = int(c[0])

    return c


def weather():
    pog = "https://ru-meteo.ru/izhevsk/hour"

    req = requests.get(pog)
    soup = BeautifulSoup(req.text, 'html.parser')

    for temp in soup.find_all('div', class_="current-temp"):
        temp = temp.text
        temp = temp.split('.')
        temp = temp[0]
    current_date_time = datetime.datetime.now()
    current_time = str(current_date_time.time())
    current_time = current_time.split('.')
    current_time = current_time[0]
    current_time = current_time.split(':')
    current_time.pop(2)
    current_time = current_time[0] + ":" + current_time[1]

    current_date = str(date.today())
    current_date = current_date.split('-')
    current_date = current_date[2] + '.' + current_date[1]
    timew = f'{current_date}   {current_time}'
    for obl in soup.find('td', class_='dsr t-10'):
        obl = obl.text.split(',')
        obl = obl[0]
        if obl == "–Ø—Å–Ω–æ":
            obl = obl + "‚òÄÔ∏è"
        if obl == "–ü–∞—Å–º—É—Ä–Ω–æ":
            obl = obl + "‚òÅÔ∏èÔ∏è"
        if obl == "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ–±–ª–∞—á–Ω–æ":
            obl = obl + "üå•Ô∏è"
        if obl == "–°–ª–∞–±—ã–π —Å–Ω–µ–≥":
            obl = obl + "üå®Ô∏è"
        if obl == "–ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å":
            obl = obl + "üå§"
    for real_temp in soup.find_all('div', class_='current-temp'):
        for real_temp in soup.find_all('span', class_='apparent'):
            real_temp = real_temp.text.split()
            real_temp = real_temp[2].split('¬∞')
            real_temp = real_temp[0]
    for wind_max in soup.find_all('div', class_="main"):
        for wind_max in soup.find_all('li', title="–í–µ—Ç–µ—Ä –≤ —Ä—É–º–±–∞—Ö –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞  (–æ—Ç–∫—É–¥–∞ –¥—É–µ—Ç)"):
            wind_max = wind_max.text.split()
            wind_max = wind_max[6]
    for wind in soup.find_all('div', class_="main"):
        for wind in soup.find_all('li', title="–í–µ—Ç–µ—Ä –≤ —Ä—É–º–±–∞—Ö –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞  (–æ—Ç–∫—É–¥–∞ –¥—É–µ—Ç)"):
            wind = wind.text.split()
            wind = wind[1]
    for wla in soup.find('td', class_="hmid t-8"):
        wla = wla.text
    weather_info = '‚úã–ü–æ–≥–æ–¥–∞ –≤ –ò–∂–µ–≤—Å–∫–µ: ' + '\n' + 'üå°' + temp +'C' + f' ({real_temp}¬∞C), ' + obl + '\n' + 'üí¶–í–ª–∞–∂–Ω–æ—Å—Ç—å - ' + wla + '\n' + f'üå¨–í–µ—Ç–µ—Ä - {wind} –º/—Å' + f' (max - {wind_max} –º/—Å)' + '\n' + f'–î–∞–Ω–Ω—ã–µ –Ω–∞ {timew}'
    return weather_info


def clothes():
    pog = "https://ru-meteo.ru/izhevsk/hour"

    req = requests.get(pog)
    soup = BeautifulSoup(req.text, 'html.parser')

    for temp in soup.find_all('div', class_="current-temp"):
        temp = temp.text
        temp = temp.split('.')
        temp = temp[0]
    current_date_time = datetime.datetime.now()
    current_time = str(current_date_time.time())
    current_time = current_time.split('.')
    current_time = current_time[0]
    current_time = current_time.split(':')
    current_time.pop(2)
    current_time = current_time[0] + ":" + current_time[1]

    current_date = str(date.today())
    current_date = current_date.split('-')
    current_date = current_date[2] + '.' + current_date[1]
    timew = f'{current_date}   {current_time}'
    for obl in soup.find('td', class_='dsr t-10'):
        obl = obl.text.split(',')
        obl = obl[0]
        if obl == "–Ø—Å–Ω–æ":
            obl = obl + "‚òÄÔ∏è"
        if obl == "–ü–∞—Å–º—É—Ä–Ω–æ":
            obl = obl + "‚òÅÔ∏èÔ∏è"
        if obl == "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ–±–ª–∞—á–Ω–æ":
            obl = obl + "üå•Ô∏è"
        if obl == "–°–ª–∞–±—ã–π —Å–Ω–µ–≥":
            obl = obl + "üå®Ô∏è"
        if obl == "–ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å":
            obl = obl + "üå§"
    for real_temp in soup.find_all('div', class_='current-temp'):
        for real_temp in soup.find_all('span', class_='apparent'):
            real_temp = real_temp.text.split()
            real_temp = real_temp[2].split('¬∞')
            real_temp = real_temp[0]
    for wind_max in soup.find_all('div', class_="main"):
        for wind_max in soup.find_all('li', title="–í–µ—Ç–µ—Ä –≤ —Ä—É–º–±–∞—Ö –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞  (–æ—Ç–∫—É–¥–∞ –¥—É–µ—Ç)"):
            wind_max = wind_max.text.split()
            wind_max = wind_max[6]
    for wind in soup.find_all('div', class_="main"):
        for wind in soup.find_all('li', title="–í–µ—Ç–µ—Ä –≤ —Ä—É–º–±–∞—Ö –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞  (–æ—Ç–∫—É–¥–∞ –¥—É–µ—Ç)"):
            wind = wind.text.split()
            wind_fix = int(wind[1])

    real_temp = real_temp.split('‚àí')
    real_temp = int(real_temp[1])
    real_temp = real_temp * -1

    if -5 <= real_temp <= -1:
        if wind_fix >= 5:

            a = "–°–µ–≥–æ–¥–Ω—è –Ω–µ –æ—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ –∏ –≤–µ—Ç—Ä–µ–Ω–Ω–æ"
            b = "–Ø —Å–æ–≤–µ—Ç—É—é –Ω–∞–¥–µ—Ç—å –≤–∞–º —à–∞–ø–∫—É, –∫–∞–ø—é—à–æ–Ω –∏ —à–∞—Ä—Ñ"

            return a, b
        else:

            a = "–°–µ–≥–æ–¥–Ω—è –Ω–µ –æ—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ"
            b = "–Ø —Å–æ–≤–µ—Ç—É—é –Ω–∞–¥–µ—Ç—å –≤–∞–º —à–∞–ø–∫—É"

            return a, b
    if -10 <= real_temp <= -6:
        if wind_fix >= 5:

            a = "–°–µ–≥–æ–¥–Ω—è –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ –∏ –≤–µ—Ç—Ä–µ–Ω–Ω–æ"
            b = "–Ø —Å–æ–≤–µ—Ç—É—é –Ω–∞–¥–µ—Ç—å –≤–∞–º —Ç—ë–ø–ª—É—é —à–∞–ø–∫—É, —à–∞—Ä—Ñ, –∫–∞–ø—é—à–æ–Ω –∏ –ø–µ—Ä—á–∞—Ç–∫–∏"

            return a, b
        else:

            a = "–°–µ–≥–æ–¥–Ω—è –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ"
            b = "–Ø —Å–æ–≤–µ—Ç—É—é –Ω–∞–¥–µ—Ç—å –≤–∞–º —Ç—ë–ø–ª—É—é —à–∞–ø–∫—É –∏ –ø–µ—Ä—á–∞—Ç–∫–∏"

            return a, b
    if -15 <= real_temp <= -11:
        if wind_fix >= 5:

            a = "–°–µ–≥–æ–¥–Ω—è —Ö–æ–ª–æ–¥–Ω–æ –∏ –≤–µ—Ç—Ä–µ–Ω–Ω–æ"
            b = "–Ø —Å–æ–≤–µ—Ç—É—é –≤–∞–º –Ω–∞–¥–µ—Ç—å –ø–æ–¥—à—Ç–∞–Ω–Ω–∏–∫–∏, —Ç—ë–ø–ª—É—é —à–∞–ø–∫—É, —à–∞—Ä—Ñ, –ø–µ—Ä—á–∞—Ç–∫–∏, –∫–∞–ø—é—à–æ–Ω –∏ –∫—É—Ä—Ç–∫—É –¥–æ –∫–æ–ª–µ–Ω–∞"

            return a, b
        else:

            a = "–°–µ–≥–æ–¥–Ω—è —Ö–æ–ª–æ–¥–Ω–æ"
            b = "–Ø —Å–æ–≤–µ—Ç—É—é –≤–∞–º –Ω–∞–¥–µ—Ç—å –ø–æ–¥—à—Ç–∞–Ω–Ω–∏–∫–∏, —Ç—ë–ø–ª—É—é —à–∞–ø–∫—É, –ø–µ—Ä—á–∞—Ç–∫–∏ –∏ –∫—É—Ä—Ç–∫—É –¥–æ –∫–æ–ª–µ–Ω–∞"
            return a, b

    if -20 <= real_temp <= -16:
        if wind_fix >= 5:
            print("–°–µ–≥–æ–¥–Ω—è –ø—Ä–∞–≤–¥–∞ —Ö–æ–ª–æ–¥–Ω–æ –∏ –≤–µ—Ç—Ä–µ–Ω–Ω–æ")
            print("–Ø —Å–æ–≤–µ—Ç—É—é –≤–∞–º –Ω–∞–¥–µ—Ç—å –ø–æ–¥—à—Ç–∞–Ω–Ω–∏–∫–∏, —Ç—ë–ø–ª—É—é —à–∞–ø–∫—É, —à–∞—Ä—Ñ, –ø–µ—Ä—á–∞—Ç–∫–∏, –∫–æ—Ñ—Ç—É, –∫–∞–ø—é—à–æ–Ω –∏ –∫—É—Ä—Ç–∫—É –¥–æ –∫–æ–ª–µ–Ω–∞")

            a = "–°–µ–≥–æ–¥–Ω—è –ø—Ä–∞–≤–¥–∞ —Ö–æ–ª–æ–¥–Ω–æ –∏ –≤–µ—Ç—Ä–µ–Ω–Ω–æ"
            b = "–Ø —Å–æ–≤–µ—Ç—É—é –≤–∞–º –Ω–∞–¥–µ—Ç—å –ø–æ–¥—à—Ç–∞–Ω–Ω–∏–∫–∏, —Ç—ë–ø–ª—É—é —à–∞–ø–∫—É, —à–∞—Ä—Ñ, –ø–µ—Ä—á–∞—Ç–∫–∏, –∫–æ—Ñ—Ç—É, –∫–∞–ø—é—à–æ–Ω –∏ –∫—É—Ä—Ç–∫—É –¥–æ –∫–æ–ª–µ–Ω–∞"

            return a, b
        else:

            a = "–°–µ–≥–æ–¥–Ω—è –ø—Ä–∞–≤–¥–∞ —Ö–æ–ª–æ–¥–Ω–æ"
            b = "–Ø —Å–æ–≤–µ—Ç—É—é –≤–∞–º –Ω–∞–¥–µ—Ç—å –ø–æ–¥—à—Ç–∞–Ω–Ω–∏–∫–∏, —Ç—ë–ø–ª—É—é —à–∞–ø–∫—É, –ø–µ—Ä—á–∞—Ç–∫–∏, –∫–æ—Ñ—Ç—É –∏ –∫—É—Ä—Ç–∫—É –¥–æ –∫–æ–ª–µ–Ω–∞"

            return a, b
    if -25 <= real_temp <= -21:
        if wind_fix >= 5:

            a = "–°–µ–≥–æ–¥–Ω—è –æ—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ –∏ –≤–µ—Ç—Ä–µ–Ω–Ω–æ"
            b = "–Ø —Å–æ–≤–µ—Ç—É—é –≤–∞–º –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ –¥–æ–º–∞"

            return a, b
        else:

            a = "–°–µ–≥–æ–¥–Ω—è –æ—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ"
            b = "–Ø —Å–æ–≤–µ—Ç—É—é –≤–∞–º –Ω–∞–¥–µ—Ç—å –Ω–∞–¥–µ—Ç—å –ø–æ–¥—à—Ç–∞–Ω–Ω–∏–∫–∏, —Ç—ë–ø–ª—É—é —à–∞–ø–∫—É, –ø–µ—Ä—á–∞—Ç–∫–∏, –∫–æ—Ñ—Ç—É –∏ –∫—É—Ä—Ç–∫—É –¥–æ –∫–æ–ª–µ–Ω–∞"

            return a, b


clothes()


def money():
    pog = "https://www.banki.ru/products/currency/cash/usd/izhevsk/"

    req = requests.get(pog)
    soup = BeautifulSoup(req.text, 'html.parser')

    for usd in soup.find_all('td', class_="currency-table__rate currency-table__darken-bg"):
        usd = usd.find('div', class_="currency-table__large-text")
        usd = usd.text
        usd = f"{usd} ‚ÇΩ"
        return usd


def money_euro():
    pog = "https://www.banki.ru/products/currency/eur/"

    req = requests.get(pog)
    soup = BeautifulSoup(req.text, 'html.parser')

    for euro in soup.find_all('td', class_="currency-table__rate currency-table__darken-bg"):
        euro = euro.find('div', class_="currency-table__large-text")
        euro = euro.text
        euro = f"{euro} ‚ÇΩ"
        return euro


def btc():
    pog = "https://mainfin.ru/crypto/bitcoin"

    req = requests.get(pog)
    soup = BeautifulSoup(req.text, 'html.parser')

    for btc in soup.find_all('div', class_="crypto_curr_val"):
        btc = btc.text

        return btc


def info():
    euro_ = money_euro()
    weather_ = weather()
    clothes_ = clothes()
    btc_ = btc()
    usd_ = money()
    text = f"{weather_} \n ******************************** \n ‚ùÑÔ∏è{clothes_[0]}‚ùÑÔ∏è \n ‚ùóÔ∏è{clothes_[1]}‚ùóÔ∏è\n ******************************** \n üí∞–ë–∏—Ç–∫–æ–∏–Ω: {btc_} \n üíµ–î–æ–ª–ª–∞—Ä: {usd_} \n üí∂–ï–≤—Ä–æ: {euro_}"
    return text


bot = Bot(token=token)
dp = Dispatcher(bot)


def main_bot(dp):
    @dp.message_handler(commands=['start'])
    async def cmd_start(message: types.Message, markup=None):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_1 = types.KeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        keyboard.add(button_1)
        await message.answer(f"‚úã–ü—Ä–∏–≤–µ—Ç! –ú–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞, –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –æ–±–ª–µ–≥—á–µ–Ω–∏–∏ —Ç–≤–æ–∏—Ö —É—Ç—Ä–µ–Ω–Ω–∏—Ö –¥–µ–ª. –Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã, –æ–¥–µ–∂–¥—ã, –∫–æ—Ç–æ—Ä—É—é —Ç–µ–±–µ –Ω–∞–¥–æ –Ω–∞–¥–µ—Ç—å, –∏ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Ç—Ä–æ–º –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è, —Å–ª–µ–¥—É–π –º–æ–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º: \n\n ‚ùóÔ∏è–ß—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –µ–≥–æ, –≤ –ø–æ–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ 7:00\n\n ‚ùóÔ∏è–ï—Å–ª–∏ –Ω–∞–π–¥—ë—à—å –∫–∞–∫–∏–µ —Ç–æ –Ω–µ–¥–æ—á—ë—Ç—ã –∏–ª–∏ –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–∏—à–∏ —Å—é–¥–∞ -> @fazk4ek", reply_markup=keyboard)

    @dp.message_handler(content_types=['text'])
    async def main(message: types.Message):

        if message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
            a = info()
            a_s = a.split('********************************')
            await bot.send_message(message.chat.id,
                             text=a_s[0])
            time.sleep(0.4)
            await bot.send_message(message.chat.id,
                             text=a_s[1])
            time.sleep(0.4)
            await bot.send_message(message.chat.id,
                             text=a_s[2])
            time.sleep(0.8)
            await bot.send_message(message.chat.id,
                             text="–ñ–µ–ª–∞—é –≤–∞–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è)")

        elif message.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏":
            time.sleep(0.3)
            await bot.send_message(message.chat.id,
                             text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ - 7:00")
            time.sleep(0.3)
            await bot.send_message(message.chat.id,
                             text="–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –µ–≥–æ")

        elif (re.match(r'([12]\d[:][0-5]\d)|([1-9][:][0-5]\d)', message.text)) is None:
            await bot.send_message(message.chat.id,
                                   text="–ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        else:
            a = timew()
            c = sec()
            time.sleep(0.3)

            n_time = message.text
            n_time = n_time.split(':')
            z = int(n_time[0])
            v = int(n_time[1])
            x = a + (z*60+v)
            if x > 1440:
                x = x - 1440
            await bot.send_message(message.chat.id, text="–¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            await asyncio.sleep(x*60-c-2)
            a = info()
            a_s = a.split('********************************')
            await bot.send_message(message.chat.id,
                                   text="–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!")
            time.sleep(1)
            await bot.send_message(message.chat.id,
                                   text=a_s[0])
            time.sleep(0.4)
            await bot.send_message(message.chat.id,
                                   text=a_s[1])
            time.sleep(0.4)
            await bot.send_message(message.chat.id,
                                   text=a_s[2])
            time.sleep(0.4)
            await bot.send_message(message.chat.id,
                                   text="–ñ–µ–ª–∞—é –≤–∞–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è)")


if __name__ == '__main__':
    th2 = threading.Thread(target=main_bot, args=(dp,), daemon=True)
    th2.start()
    executor.start_polling(dp, skip_updates=True)